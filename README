AutoMap: A Lightweight Dependency for Automatic Object Mapping in Spring Applications
AutoMap is a lightweight and easy-to-use dependency designed to simplify object mapping in Spring applications. With AutoMap, you can automatically map fields between DTOs (Data Transfer Objects) and entities using simple annotations, eliminating the need for manual mapping code.

Features
Annotation-Based Mapping: Use @AutoMap to define how fields should be mapped.

Nested Object Mapping: Automatically map nested objects (e.g., User with Address).

Custom Converters: Define custom converters for fields that require special handling.

Collection Mapping: Support for mapping collections like List, Set, and Map.

Conditional Mapping: Map fields only if certain conditions are met.

Field Exclusion: Exclude specific fields from being mapped.

Bidirectional Mapping: Map objects in both directions (e.g., User to UserDTO and vice versa).

Validation Support: Validate fields during mapping (e.g., @NotNull, @Size).

Lightweight: No heavy dependencies‚Äîjust pure Java reflection.

Easy Integration: Works seamlessly with Spring Boot applications.

Installation
Maven
Add the following dependency to your pom.xml:

xml
Copy
<dependency>
    <groupId>hassan.abidar</groupId>
    <artifactId>automap</artifactId>
    <version>0.0.1</version>
</dependency>
Run HTML
Gradle
Add the following dependency to your build.gradle:

groovy
Copy
dependencies {
    implementation 'hassan.abidar:automap:0.0.1'
}
Quick Start
1. Add the Dependency
Add the AutoMap dependency to your project as shown above.

2. Annotate Your Classes
Use the @AutoMap annotation to define how fields should be mapped.

Example: Entity to DTO
java
Copy
@AutoMap(target = UserDTO.class)
public class User {
    private Long id;
    private String name;
    private String email;
}

public class UserDTO {
    private Long id;
    private String name;
    private String email;
}
3. Use the Mapper
AutoMap will automatically map fields between the source and target objects.

java
Copy
User user = new User();
user.setId(1L);
user.setName("John Doe");
user.setEmail("john.doe@example.com");

UserDTO userDTO = AutoMapper.map(user, UserDTO.class);
System.out.println(userDTO.getName()); // Output: John Doe
Advanced Usage
Nested Object Mapping
AutoMap can handle nested objects automatically.

Example:
java
Copy
@AutoMap(target = UserDTO.class)
public class User {
    private Long id;
    private String name;
    private Address address; // Nested object
}

public class UserDTO {
    private Long id;
    private String name;
    private AddressDTO address; // Nested DTO
}
Custom Converters
Define custom converters for fields that require special handling.

Example:
java
Copy
@AutoMap(target = UserDTO.class, customConverter = DateToStringConverter.class)
public class User {
    private Long id;
    private String name;
    private Date birthDate; // Custom conversion needed
}

public class UserDTO {
    private Long id;
    private String name;
    private String birthDate; // Converted to String
}
Conditional Mapping
Map fields only if certain conditions are met.

Example:
java
Copy
@AutoMap(target = UserDTO.class, condition = "name != null")
public class User {
    private Long id;
    private String name;
    private String email;
}
Field Exclusion
Exclude specific fields from being mapped.

Example:
java
Copy
@AutoMap(target = UserDTO.class, excludeFields = {"password"})
public class User {
    private Long id;
    private String name;
    private String password; // Excluded from mapping
}
Contributing
We welcome contributions to AutoMap! If you'd like to contribute, please follow these steps:

Fork the repository.

Create a new branch for your feature or bugfix.

Make your changes and write tests.

Submit a pull request with a detailed description of your changes.

Acknowledgments
Thanks to the Spring and Java communities for their incredible tools and libraries.


About the Author
Hi, I'm Hassan Abidar, a software engineer passionate about building tools that make developers' lives easier. You can connect with me on LinkedIn or check out my other projects on GitHub.

Star the Repository ‚≠ê
If you find AutoMap useful, please consider giving it a star on GitHub! Your support helps us grow the project and improve it for everyone.

GitHub Stars

Happy mapping! üöÄ